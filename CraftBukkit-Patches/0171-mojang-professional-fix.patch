From 0fa91ab45bc31173110b1c971e5150c73d0ef288 Mon Sep 17 00:00:00 2001
From: BuildTools <unconfigured@null.spigotmc.org>
Date: Fri, 1 May 2015 11:13:03 +0200
Subject: [PATCH] mojang-professional-fix


diff --git a/src/main/java/net/minecraft/server/ReadTimeoutHandler2.java b/src/main/java/net/minecraft/server/ReadTimeoutHandler2.java
new file mode 100644
index 0000000..f5e4e4e
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ReadTimeoutHandler2.java
@@ -0,0 +1,165 @@
+/*
+ * To change this template, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package net.minecraft.server;
+
+import io.netty.channel.ChannelHandler;
+import io.netty.channel.ChannelHandlerContext;
+import io.netty.handler.timeout.ReadTimeoutException;
+import java.util.concurrent.TimeUnit;
+
+/**
+ *
+ * @author ABC
+ */
+public class ReadTimeoutHandler2 extends io.netty.handler.timeout.ReadTimeoutHandler implements ChannelHandler {
+
+    private long timeout;
+    private TimeUnit timeUnit;
+    private long timeoutMillis;
+    private volatile long lastTime;
+    public ReadTimeoutHandler2(int timeoutSeconds) {
+        super(timeoutSeconds);
+        this.timeout=timeoutSeconds;
+        this.timeUnit=TimeUnit.SECONDS;
+        timeoutMillis=timeout*1000L;
+        this.lastTime=0L;
+    }
+
+    public ReadTimeoutHandler2(long timeout, TimeUnit timeUnit) {
+        super(timeout, timeUnit);
+        this.timeout = timeout;
+        this.timeUnit = timeUnit;
+        this.lastTime=0L;
+        if(this.timeUnit==TimeUnit.SECONDS)
+        {
+            timeoutMillis=timeout*1000L;
+        } else if(this.timeUnit == TimeUnit.MILLISECONDS) {
+            timeoutMillis=timeout;
+        } else {
+            this.timeout=30;
+            timeoutMillis=30000L;
+            this.timeUnit=TimeUnit.SECONDS;
+        }
+    }
+
+    @Override
+    public void channelActive(ChannelHandlerContext ctx) throws Exception {
+        super.channelActive(ctx);
+    }
+
+    @Override
+    public void channelInactive(ChannelHandlerContext ctx) throws Exception {
+        super.channelInactive(ctx);
+    }
+
+    @Override
+    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
+        if(this.isTimeout())
+        {
+            readTimedOut(ctx);
+            return;
+        }
+        this.lastTime=System.currentTimeMillis();
+        super.channelRead(ctx, msg);
+    }
+
+    @Override
+    public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {
+        super.channelReadComplete(ctx);
+    }
+
+    @Override
+    public void channelRegistered(ChannelHandlerContext ctx) throws Exception {
+        super.channelRegistered(ctx);
+    }
+
+    @Override
+    public void channelUnregistered(ChannelHandlerContext ctx) throws Exception {
+        super.channelUnregistered(ctx);
+    }
+
+    @Override
+    public void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exception {
+        super.channelWritabilityChanged(ctx);
+    }
+
+    @Override
+    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
+        if(!isTimeout(cause))
+            return;
+        super.exceptionCaught(ctx, cause);
+    }
+
+    @Override
+    protected void readTimedOut(ChannelHandlerContext ctx) throws Exception {
+        if(!isTimeout())
+            return;
+        super.readTimedOut(ctx);
+    }
+
+    @Override
+    public void handlerAdded(ChannelHandlerContext ctx) throws Exception {
+        super.handlerAdded(ctx);
+    }
+
+    @Override
+    public void handlerRemoved(ChannelHandlerContext ctx) throws Exception {
+        super.handlerRemoved(ctx);
+    }
+
+    @Override
+    public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {
+        super.userEventTriggered(ctx, evt);
+    }
+
+    @Override
+    public String toString() {
+        return super.toString();
+    }
+
+    @Override
+    public boolean isSharable() {
+        return super.isSharable();
+    }
+
+    @Override
+    public int hashCode() {
+        return super.hashCode();
+    }
+
+    @Override
+    protected void finalize() throws Throwable {
+        super.finalize();
+    }
+    @Override
+    public boolean equals(Object obj) {
+        return super.equals(obj);
+    }
+
+    @Override
+    protected Object clone() throws CloneNotSupportedException {
+        return super.clone();
+    }
+    
+    private long getDiff()
+    {
+        return System.currentTimeMillis()-lastTime;
+    }
+    
+    private boolean isTimeout()
+    {
+        if(lastTime==0L)
+        {
+            return false;
+        } else {
+            return getDiff()>=timeoutMillis;
+        }
+    }
+    
+     private boolean isTimeout(Throwable cause)
+    {
+        return isTimeout()&&(cause instanceof ReadTimeoutException);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ServerConnectionChannel.java b/src/main/java/net/minecraft/server/ServerConnectionChannel.java
index b820b02..9f8e9d8 100644
--- a/src/main/java/net/minecraft/server/ServerConnectionChannel.java
+++ b/src/main/java/net/minecraft/server/ServerConnectionChannel.java
@@ -26,7 +26,7 @@ class ServerConnectionChannel extends ChannelInitializer {
             ;
         }
 
-        channel.pipeline().addLast("timeout", new ReadTimeoutHandler(30)).addLast("legacy_query", new LegacyPingHandler(this.a)).addLast("splitter", new PacketSplitter()).addLast("decoder", new PacketDecoder(EnumProtocolDirection.SERVERBOUND)).addLast("prepender", new PacketPrepender()).addLast("encoder", new PacketEncoder(EnumProtocolDirection.CLIENTBOUND));
+        channel.pipeline().addLast("timeout", new ReadTimeoutHandler2(30)).addLast("legacy_query", new LegacyPingHandler(this.a)).addLast("splitter", new PacketSplitter()).addLast("decoder", new PacketDecoder(EnumProtocolDirection.SERVERBOUND)).addLast("prepender", new PacketPrepender()).addLast("encoder", new PacketEncoder(EnumProtocolDirection.CLIENTBOUND));
         NetworkManager networkmanager = new NetworkManager(EnumProtocolDirection.SERVERBOUND);
 
         ServerConnection.a(this.a).add(networkmanager);
-- 
2.1.4

