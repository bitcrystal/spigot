From a2de96e5373b34402561bee9d622a9e2ae72a7bc Mon Sep 17 00:00:00 2001
From: BuildTools <unconfigured@null.spigotmc.org>
Date: Thu, 30 Apr 2015 14:59:38 +0200
Subject: [PATCH] fuck-mojang-fixxes


diff --git a/src/main/java/net/minecraft/server/ReadTimeoutHandler.java b/src/main/java/net/minecraft/server/ReadTimeoutHandler.java
new file mode 100644
index 0000000..4a42993
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ReadTimeoutHandler.java
@@ -0,0 +1,140 @@
+/*
+ * To change this template, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package de.demonbindestrichcraft.lib.bukkit.wbukkitlib.pluginhooks.register.wrapper.register.myregister.werriscoiniator;
+
+import io.netty.channel.ChannelHandler;
+import io.netty.channel.ChannelHandlerContext;
+import io.netty.handler.timeout.ReadTimeoutException;
+import java.util.concurrent.TimeUnit;
+
+/**
+ *
+ * @author ABC
+ */
+public class ReadTimeoutHandler extends io.netty.handler.timeout.ReadTimeoutHandler implements ChannelHandler {
+
+    private long timeout;
+    private TimeUnit timeUnit;
+    private long timeoutMillis;
+    private long lastTime;
+    public ReadTimeoutHandler(int timeoutSeconds) {
+        super(timeoutSeconds);
+        this.timeout=timeoutSeconds;
+        this.timeUnit=TimeUnit.SECONDS;
+        timeoutMillis=timeout*1000L;
+    }
+
+    public ReadTimeoutHandler(long timeout, TimeUnit timeUnit) {
+        super(timeout, timeUnit);
+        this.timeout = timeout;
+        this.timeUnit = timeUnit;
+        if(this.timeUnit==TimeUnit.SECONDS)
+        {
+            timeoutMillis=timeout*1000L;
+        } else {
+            timeoutMillis=timeout;
+        }
+    }
+
+    @Override
+    public void channelActive(ChannelHandlerContext ctx) throws Exception {
+        super.channelActive(ctx);
+    }
+
+    @Override
+    public void channelInactive(ChannelHandlerContext ctx) throws Exception {
+        super.channelInactive(ctx);
+    }
+
+    @Override
+    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
+        this.lastTime=System.currentTimeMillis();
+        super.channelRead(ctx, msg);
+    }
+
+    @Override
+    public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {
+        super.channelReadComplete(ctx);
+    }
+
+    @Override
+    public void channelRegistered(ChannelHandlerContext ctx) throws Exception {
+        super.channelRegistered(ctx);
+    }
+
+    @Override
+    public void channelUnregistered(ChannelHandlerContext ctx) throws Exception {
+        super.channelUnregistered(ctx);
+    }
+
+    @Override
+    public void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exception {
+        super.channelWritabilityChanged(ctx);
+    }
+
+    @Override
+    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
+        if(getDiff()<timeoutMillis&&(cause instanceof ReadTimeoutException))
+            return;
+        super.exceptionCaught(ctx, cause);
+    }
+
+    @Override
+    protected void readTimedOut(ChannelHandlerContext ctx) throws Exception {
+        if(getDiff()<timeoutMillis)
+            return;
+        super.readTimedOut(ctx);
+    }
+
+    @Override
+    public void handlerAdded(ChannelHandlerContext ctx) throws Exception {
+        super.handlerAdded(ctx);
+    }
+
+    @Override
+    public void handlerRemoved(ChannelHandlerContext ctx) throws Exception {
+        super.handlerRemoved(ctx);
+    }
+
+    @Override
+    public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {
+        super.userEventTriggered(ctx, evt);
+    }
+
+    @Override
+    public String toString() {
+        return super.toString();
+    }
+
+    @Override
+    public boolean isSharable() {
+        return super.isSharable();
+    }
+
+    @Override
+    public int hashCode() {
+        return super.hashCode();
+    }
+
+    @Override
+    protected void finalize() throws Throwable {
+        super.finalize();
+    }
+    @Override
+    public boolean equals(Object obj) {
+        return super.equals(obj);
+    }
+
+    @Override
+    protected Object clone() throws CloneNotSupportedException {
+        return super.clone();
+    }
+    
+    private long getDiff()
+    {
+        return System.currentTimeMillis()-lastTime;
+    }
+    
+}
-- 
2.1.4

