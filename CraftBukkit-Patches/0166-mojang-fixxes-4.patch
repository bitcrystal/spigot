From c66015d193b1e7787008b9184f649bb792b6f2a3 Mon Sep 17 00:00:00 2001
From: BuildTools <unconfigured@null.spigotmc.org>
Date: Thu, 30 Apr 2015 11:57:30 +0200
Subject: [PATCH] mojang-fixxes-4


diff --git a/src/main/java/net/minecraft/server/WerrisChannel.java b/src/main/java/net/minecraft/server/WerrisChannel.java
index 80ca262..17edbc1 100644
--- a/src/main/java/net/minecraft/server/WerrisChannel.java
+++ b/src/main/java/net/minecraft/server/WerrisChannel.java
@@ -1,254 +1,254 @@
-/*
- * To change this template, choose Tools | Templates
- * and open the template in the editor.
- */
-package de.demonbindestrichcraft.lib.bukkit.wbukkitlib.pluginhooks.register.wrapper.register.myregister.werriscoiniator;
-import io.netty.buffer.ByteBufAllocator;
-import io.netty.channel.ChannelConfig;
-import io.netty.channel.ChannelFuture;
-import io.netty.channel.ChannelMetadata;
-import io.netty.channel.ChannelPipeline;
-import io.netty.channel.ChannelProgressivePromise;
-import io.netty.channel.ChannelPromise;
-import io.netty.channel.EventLoop;
-import io.netty.handler.timeout.ReadTimeoutHandler;
-import io.netty.util.Attribute;
-import io.netty.util.AttributeKey;
-import java.net.SocketAddress;
-import java.util.concurrent.TimeUnit;
-/**
- *
- * @author ABC
- */
-public class WerrisChannel implements io.netty.channel.Channel {
-    private io.netty.channel.Channel channel;
-    private io.netty.channel.ChannelHandler channelHandler;
-    private long timeoutL;
-    private TimeUnit timeUnit;
-    private ChannelPipeline pipeline;
-    public WerrisChannel(io.netty.channel.Channel channel, io.netty.channel.ChannelHandler channelHandler)
-    {
-        this(channel, channelHandler, (int)60);
-    }
-    
-    public WerrisChannel(io.netty.channel.Channel channel, io.netty.channel.ChannelHandler channelHandler, int timeoutSeconds)
-    {
-        this(channel, channelHandler, timeoutSeconds, TimeUnit.SECONDS);
-    }
-    public WerrisChannel(io.netty.channel.Channel channel, io.netty.channel.ChannelHandler channelHandler, long timeoutL, TimeUnit timeUnit)
-    {
-        this.channel=channel;
-        this.channelHandler=channelHandler;
-        this.timeoutL=timeoutL;
-        this.timeUnit=timeUnit;
-        if(this.timeoutL<=0)
-        {
-            this.timeoutL=60;
-            this.timeUnit=TimeUnit.SECONDS;
-        }
-        initPipeline();
-    }
-
-    private void initPipeline()
-    {
-        ChannelPipeline pipeline = this.channel.pipeline();
-        pipeline.addLast("readTimeout",new ReadTimeoutHandler(timeoutL, timeUnit));
-        pipeline.addLast("mainhandler", this.channelHandler);
-        this.pipeline=pipeline;
-    }
-    @Override
-    public EventLoop eventLoop() {
-        return this.channel.eventLoop();
-    }
-
-    @Override
-    public io.netty.channel.Channel parent() {
-        return this.channel.parent();
-    }
-
-    @Override
-    public ChannelConfig config() {
-        return this.channel.config();
-    }
-
-    @Override
-    public boolean isOpen() {
-        return this.channel.isOpen();
-    }
-
-    @Override
-    public boolean isRegistered() {
-        return this.channel.isRegistered();
-    }
-
-    @Override
-    public boolean isActive() {
-        return this.channel.isActive();
-    }
-
-    @Override
-    public ChannelMetadata metadata() {
-        return this.channel.metadata();
-    }
-
-    @Override
-    public SocketAddress localAddress() {
-        return this.channel.localAddress();
-    }
-
-    @Override
-    public SocketAddress remoteAddress() {
-        return this.channel.remoteAddress();
-    }
-
-    @Override
-    public ChannelFuture closeFuture() {
-        return this.channel.closeFuture();
-    }
-
-    @Override
-    public boolean isWritable() {
-        return this.channel.isWritable();
-    }
-
-    @Override
-    public io.netty.channel.Channel flush() {
-        return this.channel.flush();
-    }
-
-    @Override
-    public io.netty.channel.Channel read() {
-        return this.channel.read();
-    }
-
-    @Override
-    public Unsafe unsafe() {
-        return this.channel.unsafe();
-    }
-
-    @Override
-    public <T> Attribute<T> attr(AttributeKey<T> ak) {
-        return this.channel.attr(ak);
-    }
-
-    @Override
-    public ChannelFuture bind(SocketAddress sa) {
-        return this.channel.bind(sa);
-    }
-
-    @Override
-    public ChannelFuture connect(SocketAddress sa) {
-        return this.channel.connect(sa);
-    }
-
-    @Override
-    public ChannelFuture connect(SocketAddress sa, SocketAddress sa1) {
-        return this.channel.connect(sa, sa1);
-    }
-
-    @Override
-    public ChannelFuture disconnect() {
-        return this.channel.disconnect();
-    }
-
-    @Override
-    public ChannelFuture close() {
-        return this.channel.close();
-    }
-
-    @Override
-    public ChannelFuture deregister() {
-        return this.channel.deregister();
-    }
-
-    @Override
-    public ChannelFuture bind(SocketAddress sa, ChannelPromise cp) {
-        return this.channel.bind(sa, cp);
-    }
-
-    @Override
-    public ChannelFuture connect(SocketAddress sa, ChannelPromise cp) {
-        return this.channel.connect(sa, cp);
-    }
-
-    @Override
-    public ChannelFuture connect(SocketAddress sa, SocketAddress sa1, ChannelPromise cp) {
-        return this.channel.connect(sa, sa1, cp);
-    }
-
-    @Override
-    public ChannelFuture disconnect(ChannelPromise cp) {
-        return this.channel.disconnect(cp);
-    }
-
-    @Override
-    public ChannelFuture close(ChannelPromise cp) {
-       return this.channel.close(cp);
-    }
-
-    @Override
-    public ChannelFuture deregister(ChannelPromise cp) {
-        return this.channel.deregister(cp);
-    }
-
-    @Override
-    public ChannelFuture write(Object o) {
-        return this.channel.write(o);
-    }
-
-    @Override
-    public ChannelFuture write(Object o, ChannelPromise cp) {
-        return this.channel.write(o, cp);
-    }
-
-    @Override
-    public ChannelFuture writeAndFlush(Object o, ChannelPromise cp) {
-        return this.channel.writeAndFlush(o, cp);
-    }
-
-    @Override
-    public ChannelFuture writeAndFlush(Object o) {
-        return this.channel.writeAndFlush(o);
-    }
-
-    @Override
-    public ChannelPipeline pipeline() {
-        return pipeline;
-    }
-
-    @Override
-    public ByteBufAllocator alloc() {
-        return this.channel.alloc();
-    }
-
-    @Override
-    public ChannelPromise newPromise() {
-        return this.channel.newPromise();
-    }
-
-    @Override
-    public ChannelProgressivePromise newProgressivePromise() {
-        return this.channel.newProgressivePromise();
-    }
-
-    @Override
-    public ChannelFuture newSucceededFuture() {
-        return this.channel.newSucceededFuture();
-    }
-
-    @Override
-    public ChannelFuture newFailedFuture(Throwable thrwbl) {
-        return this.channel.newFailedFuture(thrwbl);
-    }
-
-    @Override
-    public ChannelPromise voidPromise() {
-        return this.channel.voidPromise();
-    }
-
-    @Override
-    public int compareTo(io.netty.channel.Channel o) {
-        return this.channel.compareTo(o);
-    }
-    
+/*
+ * To change this template, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package net.minecraft.server;
+import io.netty.buffer.ByteBufAllocator;
+import io.netty.channel.ChannelConfig;
+import io.netty.channel.ChannelFuture;
+import io.netty.channel.ChannelMetadata;
+import io.netty.channel.ChannelPipeline;
+import io.netty.channel.ChannelProgressivePromise;
+import io.netty.channel.ChannelPromise;
+import io.netty.channel.EventLoop;
+import io.netty.handler.timeout.ReadTimeoutHandler;
+import io.netty.util.Attribute;
+import io.netty.util.AttributeKey;
+import java.net.SocketAddress;
+import java.util.concurrent.TimeUnit;
+/**
+ *
+ * @author ABC
+ */
+public class WerrisChannel implements io.netty.channel.Channel {
+    private io.netty.channel.Channel channel;
+    private io.netty.channel.ChannelHandler channelHandler;
+    private long timeoutL;
+    private TimeUnit timeUnit;
+    private ChannelPipeline pipeline;
+    public WerrisChannel(io.netty.channel.Channel channel, io.netty.channel.ChannelHandler channelHandler)
+    {
+        this(channel, channelHandler, (int)60);
+    }
+    
+    public WerrisChannel(io.netty.channel.Channel channel, io.netty.channel.ChannelHandler channelHandler, int timeoutSeconds)
+    {
+        this(channel, channelHandler, timeoutSeconds, TimeUnit.SECONDS);
+    }
+    public WerrisChannel(io.netty.channel.Channel channel, io.netty.channel.ChannelHandler channelHandler, long timeoutL, TimeUnit timeUnit)
+    {
+        this.channel=channel;
+        this.channelHandler=channelHandler;
+        this.timeoutL=timeoutL;
+        this.timeUnit=timeUnit;
+        if(this.timeoutL<=0)
+        {
+            this.timeoutL=60;
+            this.timeUnit=TimeUnit.SECONDS;
+        }
+        initPipeline();
+    }
+
+    private void initPipeline()
+    {
+        ChannelPipeline pipeline = this.channel.pipeline();
+        pipeline.addLast("readTimeout",new ReadTimeoutHandler(timeoutL, timeUnit));
+        pipeline.addLast("mainhandler", this.channelHandler);
+        this.pipeline=pipeline;
+    }
+    @Override
+    public EventLoop eventLoop() {
+        return this.channel.eventLoop();
+    }
+
+    @Override
+    public io.netty.channel.Channel parent() {
+        return this.channel.parent();
+    }
+
+    @Override
+    public ChannelConfig config() {
+        return this.channel.config();
+    }
+
+    @Override
+    public boolean isOpen() {
+        return this.channel.isOpen();
+    }
+
+    @Override
+    public boolean isRegistered() {
+        return this.channel.isRegistered();
+    }
+
+    @Override
+    public boolean isActive() {
+        return this.channel.isActive();
+    }
+
+    @Override
+    public ChannelMetadata metadata() {
+        return this.channel.metadata();
+    }
+
+    @Override
+    public SocketAddress localAddress() {
+        return this.channel.localAddress();
+    }
+
+    @Override
+    public SocketAddress remoteAddress() {
+        return this.channel.remoteAddress();
+    }
+
+    @Override
+    public ChannelFuture closeFuture() {
+        return this.channel.closeFuture();
+    }
+
+    @Override
+    public boolean isWritable() {
+        return this.channel.isWritable();
+    }
+
+    @Override
+    public io.netty.channel.Channel flush() {
+        return this.channel.flush();
+    }
+
+    @Override
+    public io.netty.channel.Channel read() {
+        return this.channel.read();
+    }
+
+    @Override
+    public Unsafe unsafe() {
+        return this.channel.unsafe();
+    }
+
+    @Override
+    public <T> Attribute<T> attr(AttributeKey<T> ak) {
+        return this.channel.attr(ak);
+    }
+
+    @Override
+    public ChannelFuture bind(SocketAddress sa) {
+        return this.channel.bind(sa);
+    }
+
+    @Override
+    public ChannelFuture connect(SocketAddress sa) {
+        return this.channel.connect(sa);
+    }
+
+    @Override
+    public ChannelFuture connect(SocketAddress sa, SocketAddress sa1) {
+        return this.channel.connect(sa, sa1);
+    }
+
+    @Override
+    public ChannelFuture disconnect() {
+        return this.channel.disconnect();
+    }
+
+    @Override
+    public ChannelFuture close() {
+        return this.channel.close();
+    }
+
+    @Override
+    public ChannelFuture deregister() {
+        return this.channel.deregister();
+    }
+
+    @Override
+    public ChannelFuture bind(SocketAddress sa, ChannelPromise cp) {
+        return this.channel.bind(sa, cp);
+    }
+
+    @Override
+    public ChannelFuture connect(SocketAddress sa, ChannelPromise cp) {
+        return this.channel.connect(sa, cp);
+    }
+
+    @Override
+    public ChannelFuture connect(SocketAddress sa, SocketAddress sa1, ChannelPromise cp) {
+        return this.channel.connect(sa, sa1, cp);
+    }
+
+    @Override
+    public ChannelFuture disconnect(ChannelPromise cp) {
+        return this.channel.disconnect(cp);
+    }
+
+    @Override
+    public ChannelFuture close(ChannelPromise cp) {
+       return this.channel.close(cp);
+    }
+
+    @Override
+    public ChannelFuture deregister(ChannelPromise cp) {
+        return this.channel.deregister(cp);
+    }
+
+    @Override
+    public ChannelFuture write(Object o) {
+        return this.channel.write(o);
+    }
+
+    @Override
+    public ChannelFuture write(Object o, ChannelPromise cp) {
+        return this.channel.write(o, cp);
+    }
+
+    @Override
+    public ChannelFuture writeAndFlush(Object o, ChannelPromise cp) {
+        return this.channel.writeAndFlush(o, cp);
+    }
+
+    @Override
+    public ChannelFuture writeAndFlush(Object o) {
+        return this.channel.writeAndFlush(o);
+    }
+
+    @Override
+    public ChannelPipeline pipeline() {
+        return pipeline;
+    }
+
+    @Override
+    public ByteBufAllocator alloc() {
+        return this.channel.alloc();
+    }
+
+    @Override
+    public ChannelPromise newPromise() {
+        return this.channel.newPromise();
+    }
+
+    @Override
+    public ChannelProgressivePromise newProgressivePromise() {
+        return this.channel.newProgressivePromise();
+    }
+
+    @Override
+    public ChannelFuture newSucceededFuture() {
+        return this.channel.newSucceededFuture();
+    }
+
+    @Override
+    public ChannelFuture newFailedFuture(Throwable thrwbl) {
+        return this.channel.newFailedFuture(thrwbl);
+    }
+
+    @Override
+    public ChannelPromise voidPromise() {
+        return this.channel.voidPromise();
+    }
+
+    @Override
+    public int compareTo(io.netty.channel.Channel o) {
+        return this.channel.compareTo(o);
+    }
+    
 }
\ No newline at end of file
-- 
2.1.4

